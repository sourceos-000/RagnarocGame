/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gamerpg;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RIZKI ABD RAHMAN
 */
public class CreateTeam extends javax.swing.JFrame {

    private static final String username = "root";
    private static final String password = "Lann@098123";
    private static final String dataConn = "jdbc:mysql://localhost:3306/gamerpg?useSSL=false";

    Connection sqlConn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    private PlayerTeam playerTeam;

    /**
     * Creates new form CreateTeam
     */
    public CreateTeam() {
        initComponents();

        upDateDB();
        DBWeapon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        PlayerHero3 = new javax.swing.JLabel();
        PlayerWeapon3 = new javax.swing.JLabel();
        TextPlayerHeroes3 = new javax.swing.JTextField();
        TextPlayerWeapon3 = new javax.swing.JTextField();
        PlayerWeapon2 = new javax.swing.JLabel();
        PlayerHero2 = new javax.swing.JLabel();
        TextPlayerHeroes2 = new javax.swing.JTextField();
        TextPlayerWeapon2 = new javax.swing.JTextField();
        PlayerHero1 = new javax.swing.JLabel();
        TextPlayerHeroes1 = new javax.swing.JTextField();
        PlayerWeapon1 = new javax.swing.JLabel();
        TextPlayerWeapon1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        InputNamaTeam = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        Reset = new javax.swing.JButton();
        CreateTeam1 = new javax.swing.JButton();
        Battle = new javax.swing.JButton();
        Menu = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableWeapon = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        Team = new javax.swing.JLabel();
        MasukHero = new javax.swing.JButton();
        BG = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1080, 700));
        setPreferredSize(new java.awt.Dimension(1080, 700));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255,0));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255, 80));

        PlayerHero3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gamerpg/image/HeroMedusa1.png"))); // NOI18N

        PlayerWeapon3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gamerpg/image/TongkatSihir1.png"))); // NOI18N

        TextPlayerHeroes3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextPlayerHeroes3ActionPerformed(evt);
            }
        });

        TextPlayerWeapon3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextPlayerWeapon3ActionPerformed(evt);
            }
        });

        PlayerWeapon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gamerpg/image/Shield1png.png"))); // NOI18N

        PlayerHero2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gamerpg/image/HeroPoseidon1png.png"))); // NOI18N

        TextPlayerHeroes2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextPlayerHeroes2ActionPerformed(evt);
            }
        });

        PlayerHero1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gamerpg/image/HeroZeus.png"))); // NOI18N

        TextPlayerHeroes1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextPlayerHeroes1ActionPerformed(evt);
            }
        });

        PlayerWeapon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gamerpg/image/Sword1.png"))); // NOI18N

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Nama Team");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(PlayerHero1)
                            .addComponent(TextPlayerHeroes1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PlayerWeapon1)
                            .addComponent(TextPlayerWeapon1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(PlayerHero2)
                            .addComponent(TextPlayerHeroes2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PlayerWeapon2)
                            .addComponent(TextPlayerWeapon2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(PlayerHero3)
                            .addComponent(TextPlayerHeroes3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PlayerWeapon3)
                            .addComponent(TextPlayerWeapon3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(InputNamaTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(InputNamaTeam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(PlayerHero1)
                    .addComponent(PlayerHero2)
                    .addComponent(PlayerHero3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(TextPlayerHeroes1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextPlayerHeroes2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextPlayerHeroes3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(PlayerWeapon3)
                    .addComponent(PlayerWeapon2)
                    .addComponent(PlayerWeapon1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(TextPlayerWeapon1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextPlayerWeapon2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextPlayerWeapon3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nama Team", "Attacker", "Tank", "Healer"
            }
        ));
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable);

        Reset.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        CreateTeam1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        CreateTeam1.setText("CreateTeam");
        CreateTeam1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateTeam1ActionPerformed(evt);
            }
        });

        Battle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Battle.setText("Battle");
        Battle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BattleActionPerformed(evt);
            }
        });

        Menu.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Menu.setText("Menu");
        Menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Heroes", "Name", "Role", "Health", "AttackPower", "Level", "EXP"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Pilih Hero");

        jTableWeapon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Weapon", "Name", "Damage", "Role", "Bonus"
            }
        ));
        jTableWeapon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableWeaponMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableWeapon);
        if (jTableWeapon.getColumnModel().getColumnCount() > 0) {
            jTableWeapon.getColumnModel().getColumn(4).setHeaderValue("Bonus");
        }

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Pilih Weapon");

        Team.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        Team.setForeground(new java.awt.Color(255, 255, 255));
        Team.setText("CREATE TEAM");

        MasukHero.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        MasukHero.setText("Masukkan Hero");
        MasukHero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MasukHeroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(Reset)
                                .addGap(18, 18, 18)
                                .addComponent(MasukHero)
                                .addGap(18, 18, 18)
                                .addComponent(CreateTeam1))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 476, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Team)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Battle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Menu)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Menu)
                    .addComponent(Battle)
                    .addComponent(Team))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Reset)
                            .addComponent(CreateTeam1)
                            .addComponent(MasukHero))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 700));

        BG.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gamerpg/image/bg2.png"))); // NOI18N
        getContentPane().add(BG, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 700));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void MenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuActionPerformed
        Start Start = new Start();
        Start.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_MenuActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        TextPlayerHeroes1.setText("");
        TextPlayerHeroes2.setText("");
        TextPlayerHeroes3.setText("");
        TextPlayerWeapon1.setText("");
        TextPlayerWeapon2.setText("");
        TextPlayerWeapon3.setText("");

        TextPlayerHeroes1.setEnabled(true);
        TextPlayerHeroes2.setEnabled(true);
        TextPlayerHeroes3.setEnabled(true);
        TextPlayerWeapon1.setEnabled(true);
        TextPlayerWeapon2.setEnabled(true);
        TextPlayerWeapon3.setEnabled(true);
    }//GEN-LAST:event_ResetActionPerformed

    public void upDateDB() {
        try {
            // Load JDBC Driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Buat koneksi ke database
            sqlConn = DriverManager.getConnection(dataConn, username, password);

            // Buat prepared statement untuk mengambil data dari tabel heroes
            pst = sqlConn.prepareStatement("SELECT * FROM heroes");

            // Eksekusi query
            rs = pst.executeQuery();

            // Ambil metadata dari ResultSet
            ResultSetMetaData stData = rs.getMetaData();

            // Ambil jumlah kolom
            int q = stData.getColumnCount();

            // Ambil model tabel dari jTable1
            DefaultTableModel RecordTable = (DefaultTableModel) jTable1.getModel();
            RecordTable.setRowCount(0); // Bersihkan data sebelumnya

            // Loop melalui setiap baris di ResultSet
            while (rs.next()) {
                Vector<String> columnData = new Vector<>();

                // Tambahkan data dari setiap kolom ke dalam Vector
                columnData.add(rs.getString("id_character")); // ID Character
                columnData.add(rs.getString("name_heroes"));  // Nama Hero
                columnData.add(rs.getString("role"));         // Role
                columnData.add(rs.getString("health"));       // Health
                columnData.add(rs.getString("attack_power")); // Attack Power
                columnData.add(rs.getString("level"));        // Level
                columnData.add(rs.getString("exp"));          // EXP

                // Tambahkan baris ke dalam model tabel
                RecordTable.addRow(columnData);
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "JDBC Driver tidak ditemukan: " + ex.getMessage());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error SQL: " + ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        } finally {
            // Tutup koneksi dan statement
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (sqlConn != null) {
                    sqlConn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error saat menutup koneksi: " + ex.getMessage());
            }
        }
    }

    public void DBWeapon() {
        try {
            // Load JDBC Driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Buat koneksi ke database
            sqlConn = DriverManager.getConnection(dataConn, username, password);

            // Buat prepared statement untuk mengambil data dari tabel heroes
            pst = sqlConn.prepareStatement("SELECT * FROM weapon");

            // Eksekusi query
            rs = pst.executeQuery();

            // Ambil metadata dari ResultSet
            ResultSetMetaData stData = rs.getMetaData();

            // Ambil jumlah kolom
            int q = stData.getColumnCount();

            // Ambil model tabel dari jTable1
            DefaultTableModel RecordTable = (DefaultTableModel) jTableWeapon.getModel();
            RecordTable.setRowCount(0); // Bersihkan data sebelumnya

            // Loop melalui setiap baris di ResultSet
            while (rs.next()) {
                Vector<String> columnData = new Vector<>();

                // Tambahkan data dari setiap kolom ke dalam Vector
                columnData.add(rs.getString("id_weapon")); // ID Character
                columnData.add(rs.getString("name_weapon"));  // Nama Hero
                columnData.add(rs.getString("damage"));         // Role
                columnData.add(rs.getString("role"));       // Health
                columnData.add(rs.getString("bonus")); // Attack Power

                // Tambahkan baris ke dalam model tabel
                RecordTable.addRow(columnData);
            }
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "JDBC Driver tidak ditemukan: " + ex.getMessage());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error SQL: " + ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
        } finally {
            // Tutup koneksi dan statement
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (sqlConn != null) {
                    sqlConn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error saat menutup koneksi: " + ex.getMessage());
            }
        }
    }

    private void TextPlayerHeroes3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextPlayerHeroes3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextPlayerHeroes3ActionPerformed

    private void TextPlayerWeapon3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextPlayerWeapon3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextPlayerWeapon3ActionPerformed

    private void TextPlayerHeroes2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextPlayerHeroes2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextPlayerHeroes2ActionPerformed

    private void TextPlayerHeroes1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextPlayerHeroes1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextPlayerHeroes1ActionPerformed


    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        try {
            // Ambil model tabel dari jTable1
            DefaultTableModel RecordTable = (DefaultTableModel) jTable1.getModel();

            // Ambil baris yang dipilih
            int SelectedRows = jTable1.getSelectedRow();

            // Ambil nama hero dari kolom yang sesuai (misalnya kolom 1 untuk nama hero)
            String heroName = RecordTable.getValueAt(SelectedRows, 1).toString();

            // Cek TextPlayerHeroes mana yang masih kosong dan isi sesuai urutan
            if (TextPlayerHeroes1.getText().isEmpty()) {
                TextPlayerHeroes1.setText(heroName);
            } else if (TextPlayerHeroes2.getText().isEmpty()) {
                TextPlayerHeroes2.setText(heroName);
            } else if (TextPlayerHeroes3.getText().isEmpty()) {
                TextPlayerHeroes3.setText(heroName);
            } else {
                JOptionPane.showMessageDialog(this, "Tim sudah penuh!");
            }

            // Jika ada kolom exp, bisa ditambahkan:
            // jTextExp.setText(RecordTable.getValueAt(SelectedRows, 6).toString()); // exp (kolom 6)
        } catch (Exception e) {
            // Tampilkan pesan error jika terjadi exception
            JOptionPane.showMessageDialog(this, "Error selecting row: " + e.getMessage());
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jTableMouseClicked

    private Hero createHeroFromInput(String heroName, String weaponName) {
        try {
            // Ambil data hero dari database berdasarkan nama
            sqlConn = DriverManager.getConnection(dataConn, username, password);
            pst = sqlConn.prepareStatement("SELECT * FROM heroes WHERE name_heroes = ?");
            pst.setString(1, heroName);
            rs = pst.executeQuery();

            if (rs.next()) {
                int health = rs.getInt("health");
                int attackPower = rs.getInt("attack_power");

                // Ambil data weapon dari database berdasarkan nama
                pst = sqlConn.prepareStatement("SELECT * FROM weapon WHERE name_weapon = ?");
                pst.setString(1, weaponName);
                rs = pst.executeQuery();

                if (rs.next()) {
                    int weaponDamage = rs.getInt("damage");
                    WeaponHero weapon = new WeaponHero(weaponName, weaponDamage);

                    // Buat objek Hero
                    return new Hero(heroName, health, attackPower, weapon);
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error mengambil data dari database: " + ex.getMessage());
        } finally {
            // Tutup koneksi
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (sqlConn != null) {
                    sqlConn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error menutup koneksi: " + ex.getMessage());
            }
        }
        return null; // Jika data tidak ditemukan
    }

    private void BattleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BattleActionPerformed
        // TODO add your handling code here:
        TeamBattle Start = new TeamBattle();
        Start.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_BattleActionPerformed

    private void jTableWeaponMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableWeaponMouseClicked
        // TODO add your handling code here:
        try {
            // Ambil model tabel dari jTable1
            DefaultTableModel RecordTable = (DefaultTableModel) jTableWeapon.getModel();

            // Ambil baris yang dipilih
            int SelectedRows = jTableWeapon.getSelectedRow();

            // Ambil nama weapon dari kolom yang sesuai (misalnya kolom 1 untuk nama weapon)
            String weaponName = RecordTable.getValueAt(SelectedRows, 1).toString();

            // Cek TextPlayerWeapon mana yang masih kosong dan isi sesuai urutan
            if (TextPlayerWeapon1.getText().isEmpty()) {
                TextPlayerWeapon1.setText(weaponName);
            } else if (TextPlayerWeapon2.getText().isEmpty()) {
                TextPlayerWeapon2.setText(weaponName);
            } else if (TextPlayerWeapon3.getText().isEmpty()) {
                TextPlayerWeapon3.setText(weaponName);
            } else {
                JOptionPane.showMessageDialog(this, "Senjata sudah penuh!");
            }

            // Jika ada kolom exp, bisa ditambahkan:
            // jTextExp.setText(RecordTable.getValueAt(SelectedRows, 6).toString()); // exp (kolom 6)
        } catch (Exception e) {
            // Tampilkan pesan error jika terjadi exception
            JOptionPane.showMessageDialog(this, "Error selecting row: " + e.getMessage());
        }
    }//GEN-LAST:event_jTableWeaponMouseClicked

    private void CreateTeam1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateTeam1ActionPerformed
        // TODO add your handling code here:
        // Validasi apakah semua hero dan senjata sudah dipilih
        if (TextPlayerHeroes1.getText().isEmpty() || TextPlayerWeapon1.getText().isEmpty()
            || TextPlayerHeroes2.getText().isEmpty() || TextPlayerWeapon2.getText().isEmpty()
            || TextPlayerHeroes3.getText().isEmpty() || TextPlayerWeapon3.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Harap pilih semua hero dan senjata!");
            return;
        }

        // Buat objek PlayerTeam
        playerTeam = new PlayerTeam();

        // Ambil data hero dan senjata dari text field
        Hero hero1 = createHeroFromInput(TextPlayerHeroes1.getText(), TextPlayerWeapon1.getText());
        Hero hero2 = createHeroFromInput(TextPlayerHeroes2.getText(), TextPlayerWeapon2.getText());
        Hero hero3 = createHeroFromInput(TextPlayerHeroes3.getText(), TextPlayerWeapon3.getText());

        // Tambahkan hero ke PlayerTeam
        if (hero1 != null) {
            playerTeam.addHero(hero1);
        }
        if (hero2 != null) {
            playerTeam.addHero(hero2);
        }
        if (hero3 != null) {
            playerTeam.addHero(hero3);
        }

        // Tampilkan pesan sukses
        JOptionPane.showMessageDialog(this, "Tim berhasil dibuat!");

        //        TeamBattle teamBattle = new TeamBattle(playerTeam);
        //        teamBattle.setVisible(true);
        //        this.dispose();
    }//GEN-LAST:event_CreateTeam1ActionPerformed

    private void MasukHeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MasukHeroActionPerformed
        // Nonaktifkan TextPlayerHeroes dan TextPlayerWeapon yang sudah terisi
        if (!TextPlayerHeroes1.getText().isEmpty() && TextPlayerHeroes1.isEnabled()) {
            TextPlayerHeroes1.setEnabled(false);
            TextPlayerWeapon1.setEnabled(false);
        } else if (!TextPlayerHeroes2.getText().isEmpty() && TextPlayerHeroes2.isEnabled()) {
            TextPlayerHeroes2.setEnabled(false);
            TextPlayerWeapon2.setEnabled(false);
        } else if (!TextPlayerHeroes3.getText().isEmpty() && TextPlayerHeroes3.isEnabled()) {
            TextPlayerHeroes3.setEnabled(false);
            TextPlayerWeapon3.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Tidak ada hero yang dipilih!");
        }
    }//GEN-LAST:event_MasukHeroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateTeam().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BG;
    private javax.swing.JButton Battle;
    private javax.swing.JButton CreateTeam1;
    private javax.swing.JTextField InputNamaTeam;
    private javax.swing.JButton MasukHero;
    private javax.swing.JButton Menu;
    private javax.swing.JLabel PlayerHero1;
    private javax.swing.JLabel PlayerHero2;
    private javax.swing.JLabel PlayerHero3;
    private javax.swing.JLabel PlayerWeapon1;
    private javax.swing.JLabel PlayerWeapon2;
    private javax.swing.JLabel PlayerWeapon3;
    private javax.swing.JButton Reset;
    private javax.swing.JLabel Team;
    private javax.swing.JTextField TextPlayerHeroes1;
    private javax.swing.JTextField TextPlayerHeroes2;
    private javax.swing.JTextField TextPlayerHeroes3;
    private javax.swing.JTextField TextPlayerWeapon1;
    private javax.swing.JTextField TextPlayerWeapon2;
    private javax.swing.JTextField TextPlayerWeapon3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableWeapon;
    // End of variables declaration//GEN-END:variables
}
